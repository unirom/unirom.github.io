{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Unirom Home","text":""},{"location":"#bootdisc-firmware-shell-for-psx","title":"Bootdisc, Firmware, Shell for PSX","text":"<p>Custom Xplorer, Action replay and cheat cart firmware, bootdisc, import player, region switcher, FreePSXBoot installer, Memcard manager, kernel resident debugger...</p>"},{"location":"#at-a-glance","title":"At a glance:","text":"<p>You can boot Unirom from disc, a memory card, or a cheat cartridge.</p> <p>Typically:</p> <ul> <li> <p>You burn the bootdisc and launch Unirom from it.</p> </li> <li> <p>Unirom can then install itsself to memory card or cheat cart.</p> </li> <li> <p>You can now boot from memory card or cheat cart instead if you want.</p> </li> </ul> <p>Installing to a cheat cart lets you boot in about a second, and dual boot Caetla.</p> <p>Installing to a memory card + FreePSXBoot allows you to use models with no parallel port: PSOne, SCPH9000, etc.</p> <p>How do I install it? Installing from CD</p>"},{"location":"#_1","title":"Unirom Home","text":"<p>I'm having problems! Troubleshooting</p> <p>For PC-side serial upload/dumping/TTY/debugging see NOTPSXSerial (aka \"nops\").</p>"},{"location":"#features-help-topics","title":"Features / Help Topics:","text":"<ul> <li>Mod-free booting</li> <li>PAL/NTSC region override</li> <li>File Browser</li> <li> <p>File Browser</p> </li> <li> <p>ROM Flashing</p> </li> <li>Installing to Memory Card (via FreePSXBoot)</li> <li> <p>Restoring original EEPROMS</p> </li> <li> <p>PC-Side serial tools</p> </li> <li>Hex Editor</li> <li>Hidden Button Combos</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>Help, it's not booting my game!</p>"},{"location":"#_2","title":"Unirom Home","text":"<p>My game is super jerky!</p>"},{"location":"#_3","title":"Unirom Home","text":"<p>My laser is kinda noisy, doesn't sound healthy!</p> <ol> <li>Make sure you grab a good redump copy of the disc (not some crappy ECM'd rip from a random site)</li> <li>Try another burner (some discs prefer some burners)</li> <li>Burn it at low speed</li> <li>Use good quality discs. \"Verbatim\" is generally good.</li> <li>Try on another machine</li> <li>Is the disc clean?</li> <li>But like... did you really check?</li> </ol> <p>Still not booting!</p> <p>Okay, at a minimum I need to know:</p> <ul> <li>How are you booting the machine (cheat cart, boot CD, freePSXBoot etc)</li> <li>What model is the machine?</li> <li>What game?</li> <li>What region is the game from?</li> <li>What burner did you use?</li> <li>Is the disc clean?</li> <li>What brand of disc did you use?</li> <li>Does your PC read the disc?</li> <li>Is the machine modded?</li> <li>Is the laser making any noises?</li> </ul> <p>Don't forget the info above!</p>"},{"location":"#thanks","title":"Thanks","text":"<p>Big thanks to Nicolas Noble for putting together this mkdocs template + build scripts!</p>"},{"location":"#developers","title":"Developers","text":"<p>If you're interested in PSX development in general, drop by the psx.dev discord at http://PSX.dev</p>"},{"location":"advanced/","title":"Advanced","text":""},{"location":"advanced/#hidden-button-combos","title":"Hidden Button Combos","text":"<ul> <li>R1 to boot the cart</li> <li>Square to toggle fast/slow serial comms. (115200 vs 518400)</li> <li>L1 + Square to enable Debug Mode Placeholder.</li> </ul>"},{"location":"advanced/#pc-side-serial-tools","title":"PC-Side serial tools","text":"<p>The serial tool to connect to PC is called NOTPSXSerial, or \"nops\" for short. nops (aka \"NotPSXSerial\").</p> <ul> <li>It's included with the boot disc by default.</li> <li>You'll need a standard USB to UART dongle. They're like 4 dollars on Amazon.</li> <li>It's included with the boot disc by default.</li> <li>Works fine on Mac and Linux using mono.</li> </ul> <p>Can I use the parallel port?</p> <p>Nah, unlikely. It's clunky, awkward, most carts need a voltage level adapter and it's 2021.</p>"},{"location":"advanced/#supported-functions","title":"Supported functions:","text":"<ul> <li>Upload + Run an .exe</li> <li>Upload arbitrary binaries</li> <li>Flash .ROM files to your carts</li> <li>Write memcards (including FreePSXBoot FreePSXBoot)</li> <li>Dump memcards</li> <li>Dump RAM</li> <li>Watch RAM</li> <li>Poke RAM</li> <li>Read, Write, Access Breakpoints</li> <li>Call/Jump to addresses</li> <li>Enter/Exit kernel debug mode</li> </ul> <p>This is not an exhaustive list. See the nops docu for more info.</p>"},{"location":"advanced/#hex-editor","title":"Hex Editor","text":"<ul> <li>L1 / R1 = back and forward 1 page</li> <li>L1 / R1 + Triangle = back and forward a bit further</li> <li> <p>L1 / R1 + Square = back and forward even further</p> </li> <li> <p>R2 = cycle beteween RAM, EEPROM, BIOS, etc</p> </li> <li> <p>X = edit byte</p> </li> <li> <p>L2  = Enter an address manually (hint: get somewhere close via R2 first to save time)</p> </li> <li> <p>Start / Sel = Execute the code starting at the cursor</p> </li> <li> <p>Circle = Exit</p> </li> </ul>"},{"location":"debug_gdb/","title":"Debugging with GDB","text":"<p>Thanks to the hard work of Skitchin on http://psx.dev Discord, nops can act as a bridge between GDB and the PSX.</p> <p>You are able to step through and debug commerical games, or your own code in the GDB or VSCode.</p> <ul> <li>GDB connects to nops via sockets.</li> <li>Nops connects to the PSX/Unirom via serial cable.</li> </ul>"},{"location":"debug_gdb/#note","title":"Note:","text":"<p>This is still an beta in-development feature, so be sure to swing by the Discord and let us know how you got on, or hurl some abuse at @Skitchin.</p> <p></p>"},{"location":"debug_gdb/#installation","title":"Installation","text":"<p>Download the nops + unirom beta package: https://github.com/johnbaumann/unirom.github.io/releases/download/8.0.Kish/nops.gdb_unirom_beta.zip</p> <p>Other than, the nops/uni, you'll need a copy of gdb for your platform:</p>"},{"location":"debug_gdb/#windows","title":"Windows:","text":"<p>Easiest to use Nicolas Noble's prebuilt windows GDB (mips) binaries: https://static.grumpycoder.net/pixel/gdb-multiarch-windows/ Remember to add e.g. <code>c:\\gdb-multiarch\\bin</code> to your %PATH% viable!</p>"},{"location":"debug_gdb/#linuxmac","title":"Linux/Mac:","text":"<p>Apt-get, brew, etc.</p> <p></p>"},{"location":"debug_gdb/#example-flow","title":"Example flow","text":"<p>Let's pretend we're developing a Hello World example, we'll be using a modern version of GCC. The following projects are suitable for building/testing/tweaking your own code. They all include docker images, so you can use Docker and run dockerrun.bat/dockerrun.sh, dockershell.bat/dockershell.sh, etc or your own GCC setup.</p> <p>PCSX Redux's 'nugget' tool chain, there's loads of example code: https://github.com/grumpycoders/pcsx-redux/tree/main/src/mips</p> <p>A basic bare-ish metal demo with pads/gpu etc using the same toolchain: https://github.com/JonathanDotCel/helloworld_and_flappycredits</p>"},{"location":"debug_gdb/#1-build-your-thing","title":"1: Build your thing","text":"<p>Build your source and you'll generate an .elf and .exe file. The .elf is more suitable for debugging, though if your setup doesn't provide that, don't worry - you just won't have access to all of the symbols, line numbers, etc.</p>"},{"location":"debug_gdb/#2-launch-nops","title":"2: Launch nops","text":"<p>Launch nops, and tell it to listen for GDB on a specific port.:</p> <p>Something like this depending on your OS, speed, port, etc...</p> <ul> <li><code>nops /fast /gdb 127.0.0.1:3333 COM14 /m</code></li> <li><code>nops /gdb 127.0.0.1:8888 /dev/tty.SLAB_USBtoUART</code></li> </ul> <p>Note: Nops will handle putting unirom into <code>/debug</code> mode so you don't have to.</p>"},{"location":"debug_gdb/#3-launch-gdb-and-upload-commandline-version","title":"3: Launch GDB and Upload (commandline version)","text":"<p>Might be worth getting the hang of the basics before using the VSCode version:</p> <p>A: In the terminal:</p> <ul> <li><code>gdb ./helloworld.elf</code></li> </ul> <p>B: (In GDB) Tell GDB where to find nops</p> <ul> <li><code>target remote locahost:3333</code></li> </ul> <p>C: Load it and transfer to the PSX:</p> <ul> <li><code>load</code> </li> <li>(or <code>load helloworld.elf</code> if you forgot the filename in the first command)</li> </ul> <p>The psx is now in a halted state with the program ready to run, but you can issue some commands before it starts. <code>tbreak main</code> for example will set a temporary breakpoint at your program's \"main()\"</p> <p>D: Done, run it! <code>continue</code></p>"},{"location":"debug_gdb/#further-examples","title":"Further examples:","text":"<p>Ex: If you had a temporary breakpoint set, chances are it will immediately break on that. You could then do (for example)</p> <ul> <li><code>layout asm</code></li> <li><code>layout source</code></li> </ul> <p>Ex: If you wanted to change the value at a particular address:</p> <ul> <li><code>set {int}0x80010000 = 0</code></li> </ul> <p>Ex: to check register values:</p> <ul> <li><code>info regs</code></li> </ul> <p>Ex: to check a value:</p> <ul> <li><code>print main</code></li> </ul> <p>Ex: to step to the next instruction:</p> <ul> <li><code>stepi</code></li> </ul> <p>And of course, to resume:</p> <ul> <li><code>continue</code></li> </ul> <p>Once again cheers to Skitchin for his hard work on this feature!</p> <p>For a full list of available GDB commands: http://davis.lbl.gov/Manuals/GDB/gdb_34.html#SEC636</p>"},{"location":"debug_gdb/#3-launch-gdb-and-upload-via-vscode","title":"3: Launch GDB and Upload (via VSCode)","text":"<p>Create/modify the following vscode <code>launch.json</code> and put it here relative to your binary: <code>.../yourproject/helloworld.elf</code>      &lt;-- binary here <code>.../yourproject/.vscode/launchjson</code>  &lt;-- launch.json here</p> <pre><code>{\n\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"gdb\",\n            \"request\": \"launch\",\n            \"name\": \"(gdb) Launch My Hello World\",\n            \"target\": \"./helloworld.elf\",\n            \"gdbpath\": \"/usr/bin/gdb-multiarch\",\n            \"windows\": {\n                \"gdbpath\": \"C:/gdb-multiarch/bin/gdb.exe\",\n            },\n            \"cwd\": \"${workspaceRoot}\",\n            \"autorun\": [\n                \"target remote localhost:3333\",\n                \"symbol-file ./helloworld.elf\",\n                \"set substitute-path /project .\",\n                \"load ./helloworld.elf\",\n                // this line for pcsx-redux only!\n                \"monitor reset halt\",\n                \"tbreak main\",\n                \"continue\",\n            ],\n            \"valuesFormatting\": \"parseText\",\n        }\n    ]\n}\n</code></pre>"},{"location":"debug_nops/","title":"Debugging with NOPS","text":""},{"location":"debug_nops/#note","title":"Note:","text":"<p>Nops features some barebones, basic commandline debugging functionality. While these features are useful and stable, it might be worth your time to see the Debugging with GDB page instead, which offers multiple breakpoints, stepping through soruce, monitoring variables, etc.</p>"},{"location":"debug_nops/#debug-mode-basics","title":"Debug mode basics.","text":"<p>When Unirom is put into debug mode, it installs a copy of the serial routines into kernel memory meaning that you can continue to issue serial commands with nops, even after launching games/homebrew etc.</p> <p>As you can imagine, this is incredibly useful for developement as it lets you write your running .exe over itsself over and over.</p> <p>Most of the regular nops command set is supported, with the exception of e.g. rom flashing.</p>"},{"location":"debug_nops/#how-debug-mode","title":"How debug mode?","text":"<p>You can enter debug mode via <code>L1 + Square</code> or running <code>nops /debug</code> This will copy the SIO handler to kernel memory as mentioned. From here you can boot games, etc.</p>"},{"location":"debug_nops/#see-also","title":"See also:","text":"<p>nops' own documentation: NOTPSXSerial (aka \"nops\").</p> <p></p>"},{"location":"debug_nops/#the-halt-state","title":"The 'Halt State'","text":"<p>The halt state is your basic debugging break. There are 3 ways to enter the halt state:</p>"},{"location":"debug_nops/#1-via-the-commandline","title":"1: Via the commandline:","text":"<p>Running <code>nops /halt</code> will trigger an interrupt.</p>"},{"location":"debug_nops/#2-a-game-crashed","title":"2: A game crashed","text":"<p>Like /halt, this will trigger an exception.</p>"},{"location":"debug_nops/#3-you-set-a-breakpoint","title":"3: You set a breakpoint","text":"<p>You've set a read/write/execute breakpoint, and that's been triggered.</p> <p>In all 3 cases, the kernel debug mode sio handler (which now sits in the kernel) will catch the event and hold the PSX in a tight loop, waiting for instructions.</p> <p>To exit the halt state, issue: <code>nops /cont</code></p> <p>If your software has legitimately crashed, it might not recover, but if you triggered the halt state via <code>/halt</code>, or a hook, it will be fine.</p>"},{"location":"debug_nops/#note_1","title":"Note:","text":"<p>With kernel debug installed, the machine is put into a temporary halt state while you do stuff like upload or download binaries. However: If you intend to upload or download several binaries for example, you might want to manually run <code>nops /halt</code> first, then undo that after so that your game doesn't try to execute between uploads/downloads.</p>"},{"location":"debug_nops/#note_2","title":"Note:","text":"<p>With kernel debug installed, you won't see the normal unirom guru meditation screen when something goes wrong. if you've run nops with the <code>/m</code> (monitor) command though, it will say something along the lines of \"PSX has crashed\" and offer you a look at the saved registers.</p>"},{"location":"debug_nops/#registers","title":"Registers:","text":""},{"location":"debug_nops/#this-shows-the-registers-the-instant-the-psx-entered-the-halt-state","title":"This shows the registers the instant the PSX entered the halt state:","text":"<p><code>nops /regs</code></p>"},{"location":"debug_nops/#changing-a-registers-value","title":"Changing a register's value:","text":"<p><code>nops /setreg v0 0x1F801800</code></p>"},{"location":"debug_nops/#this-example-will-reboot-the-psx-when-you-run-nops-cont-by-moving-the-pc","title":"This example will reboot the psx when you run <code>nops /cont</code> by moving the PC:","text":"<p><code>nops /setreg pc 0xBFC00000</code></p> <p>Note that <code>/setreg</code> will only work in the halt state!</p>"},{"location":"debug_nops/#hooks","title":"Hooks:","text":"<p>Hooks trigger the halt state on read, write or execution of a specific address.</p> <ul> <li><code>nops /hookread 0xADDR</code></li> <li><code>nops /hookwrite 0xADDR</code></li> <li><code>nops /hookex 0xADDR</code></li> </ul> <p>These use the coprocessor hooking mechanism, so if you're after something a little more in-depth, remember to check out Debugging with GDB</p> <p></p>"},{"location":"debug_nops/#debug-command-examples","title":"Debug Command Examples","text":"<p>As you should already know (because you've been reading every word super carefully, right?) start with:</p> <ul> <li><code>nops /debug</code></li> <li>or  <code>L1 + Square</code></li> </ul> <p>An int-driven SIO handler has now been installed into the kernel, and can talk to nops once you start a game, etc. The command set is basically the same as for regular SIO.</p>"},{"location":"debug_nops/#example-breakpoint-on-a-particular-location","title":"Example: Breakpoint on a particular location","text":"<p>Yo can do these two in whatever order:</p> <ul> <li><code>nops /debug</code></li> <li><code>nops /bin 0x80030000 something.bin</code></li> </ul> <p>Now apply the hook</p> <ul> <li><code>nops /hookex 0x80031234</code></li> </ul> <p>And execute the binary</p> <ul> <li><code>nops /jal 0x80030000 /m</code></li> </ul> <p>When your program runs from 0x80030000 to 0x80031234, nops will say something to the effect or \"The psx has halted...\". </p>"},{"location":"debug_nops/#hint","title":"Hint!","text":"<p>Don't forget the <code>/m</code> This will put nops into <code>monitor mode</code>. Monitor mode will detect when the system has halted, and offer a debug menu. From here you can dump ram, change registers, etc.</p>"},{"location":"debug_nops/#example-memory-breakpoint-on-an-exe","title":"Example: Memory breakpoint on an exe","text":"<p>Again, you have some flexibility here - but you'd best enter debug mode before uploading the .exe!</p> <ul> <li><code>nops /debug</code></li> <li><code>nops /hookread 0x80041234</code></li> <li><code>nops /exe myfile.exe</code></li> </ul> <p>or if you want to go a bit faster:</p> <ul> <li><code>nops /fast /debug</code></li> <li><code>nops /fast /hookread 0x80041234</code></li> <li><code>nops /fast /exe myfile.exe</code></li> </ul>"},{"location":"debug_nops/#a-reminder-on-fast-slow","title":"A reminder on /fast /slow","text":"<p>You've specified <code>/fast</code>. Next time you start nops, it has no way of knowing if the ps is in fast mode or not. So remember to use <code>/fast</code> on every command... or not at all! You can switch back and forth in most cases with the following (If you're sick of typing it).</p> <ul> <li><code>nops /fast</code></li> <li><code>nops /slow</code></li> <li>Tapping <code>Square</code> from in unirom</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Q: How do I install unirom?</p>"},{"location":"installation/#_1","title":"Installation","text":"<p>A: Via Unirom! Boot up the boot disc and it'll let you copy itsself to your cheat cart or memory card.</p>"},{"location":"installation/#without-mod-chip","title":"Without Mod Chip","text":"<ul> <li>Download the bootdisc from the unirom release page</li> <li>Burn to CD using ImgBurn.</li> <li>Use the best CDRs you can find. A name brand like Verbatim tends to work no problem.</li> <li>Use the lowest speed your writer supports.</li> <li>Don't stare at the fucking laser</li> <li>Boot using the swap trick</li> <li>Don't stare at the fucking laser</li> <li>Go to \"Install\" on the main page</li> <li>Seriously, don't look at the fucking laser though.</li> <li>More info on flashing to cheat carts:</li> <li>More info on flashing to mem cards:</li> </ul>"},{"location":"installation/#using-another-cheat-cart","title":"Using another cheat cart","text":"<p>There's a good chance your existing cheat cart can make the above swap easier:</p> <ul> <li>Jam down the lid sensor on your PSX </li> <li>Put an original/black disc in</li> <li>Turn the machine on, and go to the file viewer, let it happen</li> <li>Back out of the menu</li> <li>The drive is now unlocked</li> <li>Don't look at the fucking laser</li> <li>Put the burned disc in the drive</li> <li>Don't look at the fucking laser</li> <li>Start the \"game\"</li> <li>More info on flashing to cheat carts:</li> <li>More info on flashing to mem cards:</li> </ul>"},{"location":"installation/#modded-ps2-or-ps3","title":"Modded PS2 or PS3","text":"<ul> <li>Grab the FreePSXBoot+Unirom images from: FreePSXBoot)</li> <li>Write them to a memory card.</li> <li>Profit?</li> </ul>"},{"location":"installation/#with-mod-chip-xstation-etc","title":"With Mod Chip, xStation, etc","text":"<ul> <li>Just burn the CD and boot it: Download page</li> <li>Is my cheat cart supported? Probably yes</li> <li>More info on flashing to cheat carts:</li> <li>More info on flashing to mem cards:</li> </ul>"},{"location":"installation/#supported-cheat-carts","title":"Supported Cheat Carts:","text":"<p>Almost all of them, even DIY franken carts. It's only the jankiest of jank knockoffs that might not. And most jank knockoffs are fine.</p>"},{"location":"installation/#tested-working","title":"Tested working:","text":"<ul> <li>All Xplorer (V1, V2, V3, Pro, FX)</li> <li>All Datel (V1, V2, V3): Action Replay, Equalizer, GameShark, etc.</li> <li>Randos: Password Cart, Game Enhancer, Smart Cartridge, Gamars, EMS, Game Buster, etc</li> </ul>"},{"location":"installation/#supported-eeproms","title":"Supported EEPROMs","text":"<p>Most if not all of the common 28 pin JEDEC varieties should be compatible at this point.  </p> <p>Some carts cheaped out and used a ROM or a chip that was impossible to reprogram with the PS1's power supply (needing 12V mainly). In those cases, you can replace it with an other chip.</p>"},{"location":"installation/#compatible-chips","title":"Compatible chips","text":"<p>Here is a list of currently supported chips, should you need to replace the one in your cart</p> Brand Model AMD AM29F010 ATMEL 29C010A ATMEL 29LV010A ATMEL 29C020 ATMEL 29BV020 ATMEL 29C040A ATMEL 29xV040A SST 28SF040 SST 29EE010 SST 29xE010 SST 29EE010A SST 29xE010A SST 29EE020 SST 29xE020 SST 29EE020A SST 2xEE020A SST 39SF020 SST 39VF040 WINBOND 29EE01x WINBOND 29C020 WINBOND 29C040 SANYO LE28C1001"},{"location":"installation/#incompatible-chips-need-12v","title":"Incompatible chips (need 12V) :","text":"Brand Model CSI CAT28F010N SST M28F101 (reported as CAT28F010N)"},{"location":"installation/#rom-flashing","title":"Rom Flashing","text":"<p>To install to a cheat cart, the installer will write over the existing ROM. You'll need the bootdisc in the drive for it to find the files.</p> <p>All cheat carts are at least 128k. This will fit unirom standalone.</p> <p>Some cheat carts have 256k or higher. These will allow you to dual boot unirom &amp; caetla.</p> <p>The installer will attempt to auto-detect your cart type and size. If you've frankensteined a cart together, or have an unsupported chip, you can try to use the 'manual' setup option, and tell it roughly what to try. Every EEPROM I've encountered in the wild is currently supported.</p> <p>It won't flash!</p> <ul> <li>Try unirom_standalone</li> <li>Definitely start by updating to the latest version!</li> <li>Go to the <code>status</code> screen and see if it has any sort of valid ID or name for your card</li> <li>Try forcing manual mode, 128k/256k from the manual cart detector</li> </ul> <p>I wanna make a backup!</p> <ul> <li>You can back it up via nops if you care.</li> <li>Or you can restore most carts from the boot disc: Restoring ROMS</li> </ul> <p>Is my cheat cart supported?</p>"},{"location":"installation/#_2","title":"Installation","text":"<p>Probably yes</p>"},{"location":"installation/#installing-via-freepsxboot","title":"Installing via FreePSXBoot","text":"<p>FreePSXBoot is the exploit (like FreeMCBoot for PS2) which allows you to boot unirom from the memory card. Unirom will automatically detect your playstation bios version and install the appropriate card image of the same version.</p> <p>Many thanks to all of the FreePSXBoot contributers for their work on this! The FreePSXBoot Project page can be found here: FreePSXBoot on GitHub)</p> <p>If it's not working, please visit the above link and look for any special notes on your particular playstation model.  </p> <p>Then what?</p> <ul> <li>Start the PSX with the lid open (or no disc in).</li> <li>FreePSXBoot card in the left slot</li> <li>(Some playstations require any other card in the 2nd slot)</li> <li>Open the memcard manager</li> <li>You should get a progress bar...</li> <li>Unirom will load a few seconds later.</li> </ul> <p>Game crashes when I load it?</p> <p>Take the exploit card out before booting the game.</p> <p>Nothing's happening</p> <p>Right card? Right slot? Did you check out the advice on the FreePSXBoot GitHub page)?</p> <p>\"Verify Failed\" when installing</p> <p>Some cheap memory cards would not contain as much memory as they'd claim, or were just a bit slow/useless all round. Genuine, or good quality memory cards will be fine.</p> <p>Can I use a Memory Card Pro?</p> <p>Yes!</p>"},{"location":"installation/#restoring-roms","title":"Restoring ROMS","text":"<p>You can restore most carts to their factory settings via this collection of ROMs on the boot disc. Access it via the <code>Install</code> menu.</p> <p>The same general rules as Rom Flashing apply here.</p> <p>If you have an XFlash CD, you can also use the XFlash option to read the data from one of those.</p> <p>Many thanks to Squaresoft74 and kHn for maintaining this collection! Also thanks to Shendo for allowing us to use PS1CardLink!</p>"},{"location":"installation/#which-rom-file-is-which","title":"Which rom file is which?","text":""},{"location":"installation/#unirom_standalonerom","title":"unirom_standalone.rom","text":"<p>The standalone version of the rom. It's under 128k and fits on any old cart.</p>"},{"location":"installation/#unirom_withcaetlarom","title":"unirom_withcaetla.rom","text":"<p>For 256k carts or bigger. (The installer will let you know) If your cart has enough space, you can install unirom and caetla side by side.</p>"},{"location":"installation/#unirom_datelv2_withcaetlarom","title":"unirom_datelv2_withcaetla.rom","text":"<p>The V2 versions of datel carts (not V1, not V3, etc, lol) have a weird memory map with a big gap in the middle. If you want to dualboot unirom + caetla, you'll need this. If you don't want caetla, you could use the unirom_standalone.rom</p> <p>Note: unirom will hijack the initial switch state.</p>"},{"location":"serial_psx_cable/","title":"USB to Serial PSX cable","text":"<p>This cable connects a PSX to a computer. </p> <p>You can then interact with the following to upload/download binary data, peek/poke, hook r/w/x, launch executables, etc...</p> <ul> <li>Unirom booted from a cheat cart</li> <li>Unirom booted from a memory card</li> <li>Unirom booted from a CD</li> </ul>"},{"location":"serial_psx_cable/#suitable-usbserial-adapters","title":"Suitable USB/Serial adapters :","text":"<ul> <li>An FTDI FT232RL module OR</li> <li>An Arduino Uno that supports 3.3V serial OR</li> <li>A Raspberry Pi 0,1,2,3,4 OR</li> <li>A Raspberry Pi Pico OR  </li> <li>A CP2102 or CP2104 </li> </ul> <p>If you have this stuff lying around, this can help :</p> <ul> <li>A PSX SCPH-1040 serial cable, or half a cable</li> <li>A dead PSX motherboard that has a serial port, or just the SIO socket </li> <li>Dupont wires</li> <li>Component AV Multi Out cable</li> </ul>"},{"location":"serial_psx_cable/#connection","title":"Connection","text":"<p>You only need 3 wires from the PSX : Tx, Rx and Gnd.</p> <pre><code>PSX pins | FTDI pins\n2        |     GND   \n8        |     TX \n5        |     RX \n</code></pre>"},{"location":"serial_psx_cable/#which-controller-can-be-used","title":"Which controller can be used","text":""},{"location":"serial_psx_cable/#ftdi-ft232rl","title":"FTDI FT232RL","text":"<p>Connect PSX SIO pins  2, 5, 8 to the FTDI's Tx, Rx and Gnd. Done.</p> <p> </p>"},{"location":"serial_psx_cable/#33v-arduino-uno","title":"3.3V Arduino Uno","text":"<p>Some arduino unos have a jumper to use 3.3V instead of 5V levels. You can use such a board with an additional resistor, like so : </p> <p></p> <p>Sources : http://www.psxdev.net/forum/viewtopic.php?f=47&amp;t=760&amp;p=19081</p>"},{"location":"serial_psx_cable/#raspberry-pi","title":"Raspberry Pi","text":"<p>Either over your local network or via a direct lan cable setup, you can use a rpi if you have one lying around.</p> <p>Plug the PSX's serial output Rx/TX/Gnd to the GPIO14/pin 8 (Tx), GPIO15/pin 10 (Rx) and pin 6 (Gnd).</p> <p></p> <p>See here for the full solution : http://wiki.arthus.net/?psxdev-rpi_serial_over_network</p>"},{"location":"serial_psx_cable/#raspberry-pi-pico","title":"Raspberry Pi Pico","text":"<p>The new controller by Rpi foundation can be used to with the Pico-uart-bridge firmware : https://github.com/Noltari/pico-uart-bridge/releases  </p> <p>Use GPO 0/Pin 1 as Tx, GPO 1/Pin 2 as Rx and GPO 3/Pin 3 as Gnd :</p> <p></p>"},{"location":"serial_psx_cable/#cp2102-cp2104","title":"CP2102 / CP2104","text":"<p>The CP2102 and CP2104 are reported to work at least in /slow mode (115200 bauds).</p> <p></p>"},{"location":"serial_psx_cable/#others","title":"Others :","text":"<ul> <li>CH341 is reported to work in /slow mode (115200 bauds)</li> </ul>"},{"location":"serial_psx_cable/#from-the-psx-to-the-controller","title":"From the PSX to the controller","text":""},{"location":"serial_psx_cable/#method-1-half-scph-1040-cable","title":"Method #1 : Half SCPH-1040 cable","text":"<p>Hack the cable, connect things and voila :</p> <p></p> <p>Sources : http://www.psxdev.net/forum/viewtopic.php?f=62&amp;t=349#p2592 http://www.psxdev.net/forum/viewtopic.php?t=497#p3556  </p>"},{"location":"serial_psx_cable/#method-2-salvaged-psx-serial-port-full-scph-1040-cable","title":"Method #2 : Salvaged PSX serial port + full SCPH-1040 cable","text":"<p>Use a salvaged PSX SIO port from a dead motherboard, and use your precious serial cable without destroying anything :</p> <p></p> <p></p> <p>Source : http://www.psxdev.net/forum/viewtopic.php?t=744&amp;sid=ff1cc884ceaaa4267404e61e81130320#p6524</p>"},{"location":"serial_psx_cable/#method-3-dead-or-spare-psx-motherboard-full-scph-1040-cable","title":"Method #3 : Dead or spare PSX motherboard + full SCPH-1040 cable","text":"<p>Same as above except you don't even have to hack the SIO port off the motherboard, just solder your wires directly underneath the SIO port.</p> <p></p> <p>Sources : https://thp.io/2020/psxserial.html  </p>"},{"location":"serial_psx_cable/#method-4-component-av-multi-out-cable-adaptor-to-serial-io","title":"Method #4 : Component AV Multi Out cable adaptor to serial I/O","text":"<p>Component AV Multi Out cables contains all 12 pins;  cutting the extra plastic of a component AV Multi Out Cable makes it fit perfectly on the Playstation's serial I/O port.  The extra pins sits open within the serial I/O port.  Just, don't actually do this mod, because then we'll make sure to tell your insurance about it, and you won't be able to collect any money after you set your house on fire with it.</p> <p>A photo displaying how it looks like when connected: </p> <p>One may cut the extra borders of the metal case with a mini saw blade, leaving a bit of base for it's lower part to remain connected;  here is a photo displaying how it looks like with it on: </p> <p>A photo displaying how it looks like, when connected with it's AV Multi Out enclosure: </p> <p>A photo displaying the adaptor dowside-up: </p> <p>Source : Anonymous</p>"},{"location":"serial_psx_cable/#sources","title":"Sources","text":"<p>PSX Serial port pinout </p> <p>Method #1a Method #1b </p> <p>Method #2</p> <p>Method #3</p> <p>Method #4</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#mod-free-booting","title":"Mod-free booting","text":"<p>Once unirom has booted (from memcard or via flash cart), it will unlock the drive via nocash unlock* meaning you can play imports and stuff without needing to swap discs. Except on Japanese units. For those you can use a modchip, xStation, etc or just stop the disc as described below:</p> <ul> <li>boot with a black disc in</li> <li>go to the boot menu and hit \"stop disc\"</li> <li>swap discs</li> <li>don't look at the fucking laser ( it'll be deactivated, but incase it isn't for whatever reason, don't fucking look at it)</li> <li>put your other disc in and boot as normal.</li> </ul> <p>It's not working!</p> <p>Someone's probably solved it: Troubleshooting</p> <p>note*: some nicolases don't like the term \"nocash unlock\"</p>"},{"location":"usage/#palntsc-switch-region-override","title":"PAL/NTSC switch / region override","text":"<p>Allows you to force the video mode of a game to PAL or NTSC.</p> <ul> <li>PAL-&gt;NTSC will be the slightly higher PAL resolution with the slightly higher NTSC framerate.</li> <li>NTSC-PAL will be the slightly lower NTSC resolution with the slightly lower PAL framerate.</li> </ul> <p>There's a clear winner there.</p> <p>Help! It's black and white!</p> <p>Some hardware just can't handle the slightly off-spec video output from one machine doing the other's output. You can use a better scaler, DFO mod, etc or just enjoy it like an old black n white movie.</p> <p>Note: This feature is unlikely to work with homebrew that doesn't use the official PSYQ SDK.</p>"},{"location":"usage/#file-browser","title":"File Browser","text":"<p>The file browser lets you poke around for files on the CD. Valid file types are detected by their headers.</p>"},{"location":"usage/#roms","title":"ROMS","text":"<p>Flash ROMs to cart exactly like any other method.</p>"},{"location":"usage/#memcard-images","title":"Memcard Images","text":"<p>Any valid (raw) memory card dump can be written to mem cards</p>"},{"location":"usage/#exe","title":".EXE","text":"<p>Load and Exec from CD.</p>"},{"location":"usage/#other","title":"Other","text":"<p>If the file type is not recognised, unirom will fire up the hex editor.</p>"},{"location":"usage/#card-manager","title":"Card Manager","text":"<p>The card manager offers a few improvements over the stock manager.</p> <ul> <li>It's faster</li> <li>You can undelete files</li> <li>It highlights invalid files</li> <li>You can work with FreePSXBoot cards and format them.</li> <li>You can flick through virtual cards on a Memory Card Pro</li> </ul> <p>If you're having trouble with a particular memory card, do let me know, with a photo of the card (preferably with the shell off).</p>"},{"location":"usage/#note-not-all-deleted-files-can-be-restored","title":"Note: not all deleted files can be restored","text":"<p>For example if the file was part of a 3-block save, and some parts of the block have been over written.</p>"}]}